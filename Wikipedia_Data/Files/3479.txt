Title: F Sharp (programming language)
Aspects: {'F-sharp'}

F# (pronounced F sharp) is a general purpose, strongly typed, multi-paradigm programming language that encompasses functional, imperative, and object-oriented programming methods. F# is most often used as a cross-platform Common Language Infrastructure (CLI) language, but it can also generate JavaScript and graphics processing unit (GPU) code.F# is developed by the F# Software Foundation, Microsoft and open contributors. An open source, cross-platform compiler for F# is available from the F# Software Foundation. F# is also a fully supported language in Visual Studio and Xamarin Studio. Other tools supporting F# development include Mono, MonoDevelop, SharpDevelop, MBrace, and WebSharper. Plug-ins supporting F# exist for many widely used editors, most notably the Ionide extension for Atom and Visual Studio Code, and integrations for other editors such as Vim, Emacs, Sublime Text, and Rider.
F# is a member of the ML language family and originated as a .NET Framework implementation of a core of the programming language OCaml. It has also been influenced by C#, 
Python, Haskell, Scala, and Erlang.


== History ==


=== Versions ===
In the course of its development, the language has gone through several versions:


=== Language evolution ===
F# uses an open development and engineering process. 
The language evolution process is managed by Don Syme from Microsoft Research as the benevolent dictator for life (BDFL) for the language design, together with the F# Software Foundation.
Earlier versions of the F# language were designed by Microsoft and Microsoft Research using a closed development process.
F# originates from Microsoft Research, Cambridge, UK. The language was originally designed and implemented by Don Syme, according to whom in the fsharp team, they say the F is for "Fun". 
Andrew Kennedy contributed to the design of units of measure. The Visual F# Tools for Visual Studio are developed by Microsoft. The F# Software Foundation developed the F# open-source compiler and tools, incorporating the open-source compiler implementation provided by the Microsoft Visual F# Tools team.


== Language overview ==


=== Functional programming ===
F# is a strongly typed functional-first language that uses type inference. The programmer does not need to declare types—the compiler deduces types during compilation (type inference). F# also allows explicit type annotations, and requires them in some situations.
F# is an expression-based language using eager evaluation. Every statement in F#, 
including if expressions, try expressions and loops, is a composable expression with a static type. Functions and expressions that do not return any value have a return type of unit. F# uses the let keyword for binding values to a name. For example:

binds the value 7 to the name x.
New types are defined using the type keyword. For functional programming, F# provides tuple, record, discriminated union, list, option, and result types. A tuple represents a set of n values, where n ≥ 0. The value n is called the arity of the tuple. A 3-tuple would be represented as (A, B, C), where A, B, and C are values of possibly different types. A tuple can be used to store values only when the number of values is known at design-time and stays constant during execution.
A record is a type where the data members are named. Here is an example of record definition: 

Records can be created as let r = { Name="AB"; Age=42 }. The with keyword is used to create a copy of a record, as in { r with Name="CD" }, which creates a new record by copying r and changing the value of the Name field (assuming the record created in the last example was named r).
A discriminated union type is a type-safe version of C unions. For example,

Values of the union type can correspond to either union case. The types of the values carried by each union case is included in the definition of each case.
The list type is an immutable linked list represented either using a head::tail notation (:: is the cons operator) or a shorthand as [item1; item2; item3]. An empty list is written []. The option type is a discriminated union type with choices Some(x) or None. F# types may be generic, implemented as generic .NET types.
F# supports lambda functions and closures. All functions in F# are first class values and are immutable. Functions can be curried. Being first-class values, functions can be passed as arguments to other functions.  Like other functional programming languages, F# allows function composition using the >> and << operators.
F# provides sequence expressions that define a sequence seq { ... }, list [ ... ] or array [| ... |] through code that generates values. For example,

forms a sequence of squares of numbers from 0 to 14 by filtering out numbers from the range of numbers from 0 to 25. Sequences are generators – values are generated on-demand (i.e., are lazily evaluated) – while lists and arrays are evaluated eagerly.
F# uses pattern matching to bind values to names. Pattern matching is also used when accessing discriminated unions – the union is value matched against pattern rules and a rule is selected when a match succeeds. F# also supports Active Patterns as a form of extensible pattern matching. It is used, for example, when multiple ways of matching on a type exist.F# supports a general syntax for defining compositional computations called computation expressions. Sequence expressions, asynchronous computations and queries are particular kinds of computation expressions. Computation expressions are an implementation of the monad pattern.


=== Imperative programming ===
F# support for imperative programming includes

for loops
while loops
arrays, created with the [| ... |] syntax
hash table, created with the dict [ ... ] syntax or System.Collections.Generic.Dictionary<_,_> type.Values and record fields can also be labelled as mutable. For example:

Also, F# supports access to all CLI types and objects such as those defined in the System.Collections.Generic namespace defining imperative data structures.


=== Object programming ===
Like other Common Language Infrastructure (CLI) languages, F# can use CLI types and objects through object programming.  F# support for object programming in expressions includes:

Dot-notation, e.g., x.Name
Object expressions, e.g., { new obj() with member x.ToString() = "hello" }
Object construction, e.g., new Form()
Type tests, e.g., x :? string
Type coercions, e.g., x :?> string
Named arguments, e.g., x.Method(someArgument=1)
Named setters, e.g., new Form(Text="Hello")
Optional arguments, e.g., x.Method(OptionalArgument=1)Support for object programming in patterns includes

Type tests, e.g., :? string as s
Active patterns, which can be defined over object typesF# object type definitions can be class, struct, interface, enum, or delegate type definitions, corresponding to the definition forms found in C#. For example, here is a class with a constructor taking a name and age, and declaring  two properties.


=== Asynchronous programming ===
F# supports asynchronous programming through asynchronous workflows. An asynchronous workflow is defined as a sequence of commands inside an async{ ... }, as in

The let! indicates that the expression on the right (getting the response) should be done asynchronously but the flow should only continue when the result is available. In other words, from the point of view of the code block, it's as if getting the response is a blocking call, whereas from the point of view of the system, the thread won't be blocked and may be used to process other flows while the result needed for this one doesn't become available.
The async block may be invoked using the Async.RunSynchronously function. Multiple async blocks can be executed in parallel using the Async.Parallel function that takes a list of async objects (in the example, asynctask is an async object) and creates another async object to run the tasks in the lists in parallel. The resultant object is invoked using Async.RunSynchronously.Inversion of control in F# follows this pattern.


=== Parallel programming ===
Parallel programming is supported partly through the Async.Parallel, Async.Start and other operations that run asynchronous blocks in parallel.
Parallel programming is also supported through the Array.Parallel functional programming operators in the F# standard library, direct use of the System.Threading.Tasks task programming model, the direct use of .NET thread pool and .NET threads and through dynamic translation of F# code to alternative parallel execution engines such as GPU code.


=== Units of measure ===
The F# type system supports units of measure checking for numbers. The units of measure feature integrates with F# type inference to require minimal type annotations in user code.


=== Metaprogramming ===
F# allows some forms of syntax customizing via metaprogramming to support embedding custom domain-specific languages within the F# language, particularly through computation expressions.F# includes a feature for run-time meta-programming called quotations. A quotation expression evaluates to an abstract syntax tree representation of the F# expressions. Similarly, definitions labelled with the [<ReflectedDefinition>] attribute can also be accessed in their quotation form. F# quotations are used for various purposes including to compile F# code into JavaScript and GPU code. (Quotations represent their F# code expressions as data for use by other parts of the program while requiring it to be syntactically correct F# code).


=== Information-rich programming ===
F# 3.0 introduced a form of compile-time meta-programming through statically extensible type generation called F# type providers. F# type providers allow the F# compiler and tools to be extended with components that provide type information to the compiler on-demand at compile time. F# type providers have been used to give strongly typed access to connected information sources in a scalable way, including to the Freebase knowledge graph.In F# 3.0 the F# quotation and computation expression features are combined to implement LINQ queries.  For example:

The combination of type providers, queries and strongly typed functional programming is known as information rich programming.


=== Agent programming ===
F# supports a variation of the  Actor programming model through the in-memory implementation of lightweight asynchronous agents. For example, the following code defines an agent and posts 2 messages:


== Development tools ==
The Visual F# tools from Microsoft include full integrated development environment (IDE) integration in Visual Studio. With the language service installed, Visual Studio can be used to create F# projects and its debugger used on F# code. The Visual F# tools include a Visual Studio-hosted read–eval–print loop (REPL) interactive console that can execute F# code as it is written.  Visual Studio for Mac also fully supports F# projects.
Visual Studio Code contains full support for F# via the Ionide extension.
F# can be developed with any text editor. Specific support exists in editors such as Emacs.
JetBrains Rider is optimized for the development of F# Code starting with release 2019.1.
The Fable project (styled as F# |> Babel) — provides support for targeting JavaScript as a compilation backend for F# code.
WebSharper is a framework for cross-tier JavaScript and HTML5 development with F#.
MonoDevelop is an integrated development environment supporting F# programming on Linux, macOS, and Windows including support for the interactive console as used by Visual Studio.
SharpDevelop has supported F# since version 3.0.
MBrace is a framework and runtime for the development of applications with F# for the cloud.
LINQPad has supported F# since version 2.x.
Xamarin Studio supports F# since version 3.0.


== Application areas ==
F# is a general-purpose programming language.


=== Web programming ===
F# is a central part of the WebSharper framework where F# code is executed as .NET code on a server and as JavaScript code on a client.


=== Analytical programming ===
Among others, F# is used for quantitative finance programming, energy trading and portfolio optimization, machine learning, business intelligence and social gaming on Facebook.In the 2010s, F# has been positioned as an optimized alternative to C#. F#'s scripting ability and inter-language compatibility with all Microsoft products have made it popular among developers. Many developers are creating systems based on F# and use C# WCF Services.


=== Scripting ===
F# can be used as a scripting language, mainly for desktop read–eval–print loop (REPL) scripting.


== Open-source community ==
The F# open-source community includes the F# Software Foundation and the F# Open Source Group at GitHub.


== Compatibility ==
F# features a legacy "ML compatibility mode" that can directly compile programs written in a large subset of OCaml roughly, with no functors, objects, polymorphic variants, or other additions.


== Examples ==
A few small samples follow:

A Person class with a constructor taking a name and age and two immutable properties.

A simple example that is often used to demonstrate the syntax of functional languages is the factorial function for non-negative 32-bit integers, here shown in F#:

Iteration examples:

Fibonacci examples:

A sample Windows Forms program:

Asynchronous parallel programming sample (parallel CPU and I/O tasks):


== See also ==

OCaml
C Sharp (programming language) (C#)
.NET Framework
Scala (programming language)
Clojure
Haskell (programming language)
Nemerle


== Notes ==


== References ==
Syme, Don; Granicz, Adam; Cisternino, Antonio (2007). "Expert F#". Apress. 
Harrop, Jon (2010). "Visual F# 2010 for Technical Computing". Flying Frog Consultancy. 
Pickering, Robert (2007). "Foundations of F#". Apress. 
Smith, Chris (2009). "Programming F#". O'Reilly. 
Petricek, Tomas (2009). "Real World Functional Programming With Examples in F# and C#". Manning Publications. 
Hansen, Michael; Rischel, Hans (2013). "Functional Programming Using F#". Cambridge University Press. 
Astborg, Johan (2013). "F# for Quantitative Finance". Packt Publishing. 
Lundin, Mikael (2015). "Testing with F#". Packt Publishing. 


== External links ==
Official website The F# Software Foundation
The F# Open Source Group at GitHub
The Visual F# Developer Center
Tsunami, an embeddable desktop F# IDE
Cloud Tsunami, an embeddable Silverlight F# IDE
Try F#, for learning F# in a web browser
F# Snippets Site
The Visual F# team blog
The original Microsoft Research website for F#
Planet F#
The F# Survival Guide, Dec 2009 (Web-based book)
The F# Language Specification
An introduction to F# programming
A tutorial showing the process of reaching a functional design; includes test and parallel coding