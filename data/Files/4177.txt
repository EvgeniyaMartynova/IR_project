Title: LabVIEW
Aspects: {'G programming language'}

Laboratory Virtual Instrument Engineering Workbench (LabVIEW) is a system-design platform and development environment for a visual programming language from National Instruments.
The graphical language is named "G"; not to be confused with G-code. Originally released for the Apple Macintosh in 1986, LabVIEW is commonly used for data acquisition, instrument control, and industrial automation on a variety of operating systems (OSs), including Microsoft Windows, various versions of Unix, Linux, and macOS.
The latest versions of LabVIEW are LabVIEW 2019 and LabVIEW NXG 3.1, released in May 2019.


== Dataflow programming ==
The programming paradigm used in LabVIEW, sometimes called G, is based on data availability. If there is enough data available to a subVI or function, that subVI or function will execute. Execution flow is determined by the structure of a graphical block diagram (the LabVIEW-source code) on which the programmer connects different function-nodes by drawing wires. These wires propagate variables and any node can execute as soon as all its input data become available. Since this might be the case for multiple nodes simultaneously, LabVIEW can execute inherently in parallel. Multi-processing and multi-threading hardware is exploited automatically by the built-in scheduler, which multiplexes multiple OS threads over the nodes ready for execution.


== Graphical programming ==
LabVIEW integrates the creation of user interfaces (termed front panels) into the development cycle. LabVIEW programs-subroutines are termed virtual instruments (VIs). Each VI has three components: a block diagram, a front panel, and a connector pane. The last is used to represent the VI in the block diagrams of other, calling VIs. The front panel is built using controls and indicators. Controls are inputs: they allow a user to supply information to the VI. Indicators are outputs: they indicate, or display, the results based on the inputs given to the VI. The back panel, which is a block diagram, contains the graphical source code. All of the objects placed on the front panel will appear on the back panel as terminals. The back panel also contains structures and functions which perform operations on controls and supply data to indicators. The structures and functions are found on the Functions palette and can be placed on the back panel. Collectively controls, indicators, structures, and functions are referred to as nodes. Nodes are connected to one another using wires, e.g., two controls and an indicator can be wired to the addition function so that the indicator displays the sum of the two controls. Thus a virtual instrument can be run as either a program, with the front panel serving as a user interface, or, when dropped as a node onto the block diagram, the front panel defines the inputs and outputs for the  node through the connector pane. This implies each VI can be easily tested before being embedded as a subroutine into a larger program.
The graphical approach also allows nonprogrammers to build programs by dragging and dropping virtual representations of lab equipment with which they are already familiar. The LabVIEW programming environment, with the included examples and documentation, makes it simple to create small applications. This is a benefit on one side, but there is also a certain danger of underestimating the expertise needed for high-quality G programming. For complex algorithms or large-scale code, it is important that a programmer possess an extensive knowledge of the special LabVIEW syntax and the topology of its memory management. The most advanced LabVIEW development systems offer the ability to build stand-alone applications. Furthermore, it is possible to create distributed applications, which communicate by a clientâ€“server model, and are thus easier to implement due to the inherently parallel nature of G.


=== Widely-accepted design patterns ===
Applications in LabVIEW are usually designed using well-known architectures, known as design patterns. The most common design patterns for graphical LabVIEW applications are listed in the table below.


== Benefits ==


=== Interfacing to devices ===
LabVIEW includes extensive support for interfacing to devices, instruments, camera, and other devices. Users interface to hardware by either writing direct bus commands (USB, GPIB, Serial) or using high-level, device-specific, drivers that provide native LabVIEW function nodes for controlling the device.
LabVIEW includes built-in support for NI hardware platforms such as CompactDAQ and CompactRIO, with a large number of device-specific blocks for such hardware, the Measurement and Automation eXplorer (MAX) and Virtual Instrument Software Architecture (VISA) toolsets.
National Instruments makes thousands of device drivers available for download on the NI Instrument Driver Network (IDNet).


=== Code compiling ===
LabVIEW includes a compiler that produces native code for the CPU  platform. This aids performance. The graphical code is translated into executable machine code by a compiler. The LabVIEW syntax is strictly enforced during the editing process and compiled into the executable machine code when requested to run or upon saving. In the latter case, the executable and the source code are merged into a single file. The executable runs with the help of the LabVIEW run-time engine, which contains some pre-compiled code to perform common tasks that are defined by the G language. The run-time engine reduces compiling time and provides a consistent interface to various operating systems, graphic systems, hardware components, etc. The run-time environment makes the code portable across platforms. Generally, LabVIEW code can be slower than equivalent compiled C code, although the differences often lie more with program optimization than inherent execution speed.


=== Large libraries ===
Many libraries with a large number of functions for data acquisition, signal generation, mathematics, statistics, signal conditioning, analysis, etc., along with numerous for functions such as integration, filters, and other specialized abilities usually associated with data capture from hardware sensors is enormous. In addition, LabVIEW includes a text-based programming component named MathScript with added functions for signal processing, analysis, and mathematics. MathScript can be integrated with graphical programming using script nodes and uses a syntax that is compatible generally with MATLAB.


=== Parallel programming ===
LabVIEW is an inherently concurrent language, so it is very easy to program multiple tasks that are performed in parallel via multithreading. For example, this is done easily by drawing two or more parallel while loops and connecting them to two separate nodes. This is a great benefit for test system automation, where it is common practice to run processes like test sequencing, data recording, and hardware interfacing in parallel.


=== Ecosystem ===
Due to the longevity and popularity of the LabVIEW language, and the ability for users to extend its functions, a large ecosystem of third party add-ons has developed via contributions from the community.  This ecosystem is available on the LabVIEW Tools Network, which is a marketplace for both free and paid LabVIEW add-ons.


=== User community ===
There is a low-cost LabVIEW Student Edition aimed at educational institutions for learning purposes. There is also an active community of LabVIEW users who communicate through several electronic mailing lists (email groups) and Internet forums.


=== Home Bundle Edition ===
National Instruments provides a low cost LabVIEW Home Bundle Edition.


== Criticism ==
LabVIEW is a proprietary product of National Instruments. Unlike common programming languages such as C or Fortran, LabVIEW is not managed or specified by a third party standards committee such as American National Standards Institute (ANSI), Institute of Electrical and Electronics Engineers (IEEE), International Organization for Standardization (ISO), etc. Many users have criticised it for its tendency to freeze or crash during simple tasks, often requiring the software to be shut down and restarted.


=== Slow ===
Very small applications still have to start the run-time environment which is a large and slow task.  This tends to restrict LabVIEW to monolithic applications. Examples of this might be tiny programs
to grab a single value from some hardware that can be used in a scripting language - the overhead of
the run-time environment render this approach impractical with LabVIEW.


=== Non-textual ===
G language being non-textual, software tools such as versioning, side-by-side (or diff) comparison, and version code change tracking cannot be applied in the same manner as for textual programming languages. There are some additional tools to make comparison and merging of code with source code control (versioning) tools such as subversion, CVS and Perforce.


=== No zoom function ===
There was no ability to zoom in to (or enlarge) a VI which will be hard to see on a large, high-resolution monitor.
In practice however, this shouldn't be a problem because good programming practice means creating subroutines (sub-VIs),
keeping the block diagram uncluttered and relatively small.


== Release history ==
In 2005, starting with LabVIEW 8.0, major versions are released around the first week of August, to coincide with the annual National Instruments conference NI Week, and followed by a bug-fix release the following February.
In 2009, National Instruments began naming releases after the year in which they are released. A bug-fix is termed a Service Pack, for example, the 2009 service pack 1 was released in February 2010.
In 2017, National Instruments moved the annual conference to May and released LabVIEW 2017 alongside a completely redesigned LabVIEW NXG 1.0 built on Windows Presentation Foundation (WPF).


== Repositories and libraries ==
OpenG, as well as LAVA Code Repository (LAVAcr), serve as repositories for a wide range of Open Source LabVIEW applications and libraries. SourceForge has LabVIEW listed as one of the possible languages in which code can be written.
VI Package Manager has become the standard package manager for LabVIEW libraries. It is very similar in purpose to Ruby's RubyGems and Perl's CPAN, although it provides a graphical user interface similar to the Synaptic Package Manager. VI Package Manager provides access to a repository of the OpenG (and other) libraries for LabVIEW.
Tools exist to convert MathML into G code.


== Related software ==
National Instruments also offers a product named Measurement Studio, which offers many of the test, measurement, and control abilities of LabVIEW, as a set of classes for use with Microsoft Visual Studio. This allows developers to harness some of LabVIEW's strengths within the text-based .NET Framework. National Instruments also offers LabWindows/CVI as an alternative for ANSI C programmers.
When applications need sequencing, users often use LabVIEW with TestStand test management software, also from National Instruments.
The Ch interpreter is a C/C++ interpreter that can be embedded in LabVIEW for scripting.DSP Robotics' FlowStone DSP also uses a form of graphical programming similar to LabVIEW, but is limited to the robotics industry respectively.
LabVIEW has a direct node with modeFRONTIER, a multidisciplinary and multi-objective optimization and design environment, written to allow coupling to almost any computer-aided engineering tool. Both can be part of the same process workflow description and can be virtually driven by the optimization technologies available in modeFRONTIER.


== See also ==
20-sim
Comparison of numerical analysis software
Dataflow programming
DRAKON
Fourth-generation programming language
Graphical programming
Graphical system design
LabWindows/CVI
Lego Mindstorms NXT, whose programming environment, NXT-G is based on LabVIEW, and can be programmed within LabVIEW.
MATLAB/Simulink
Virtual instrumentation
CompactDAQ
CompactRIO


== References ==


== Further reading ==
Bress, Thomas J. (2013). Effective LabVIEW Programming. [S.l.]: NTS Press. ISBN 1-934891-08-8.
Blume, Peter A. (2007). The LabVIEW Style Book. Upper Saddle River, NJ: Prentice Hall. ISBN 0-13-145835-3.
Travis, Jeffrey; Kring, Jim (2006). LabVIEW for Everyone : Graphical Programming Made Easy and Fun (3rd ed.). Upper Saddle River, NJ: Prentice Hall. ISBN 0-13-185672-3.
Conway, Jon; Watts, Steve (2003). A Software Engineering Approach to LabVIEW. Upper Saddle River, NJ: Prentice Hall PTR. ISBN 0-13-009365-3.
Olansen, Jon B.; Rosow, Eric (2002). Virtual Bio-Instrumentation : Biomedical, Clinical, and Healthcare Applications in LabVIEW. Upper Saddle River, NJ: Prentice Hall PTR. ISBN 0-13-065216-4.
Beyon, Jeffrey Y. (2001). LabVIEW Programming, Data Acquisition and Analysis. Upper Saddle River, NJ: Prentice Hall PTR. ISBN 0-13-030367-4.
Travis, Jeffrey (2000). Internet Applications In LabVIEW. Upper Saddle River, NJ: Prentice Hall PTR. ISBN 0-13-014144-5.
Essick, John (1999). Advanced LabVIEW Labs. Upper Saddle River, NJ: Prentice Hall. ISBN 0-13-833949-X.


=== Articles on specific uses ===
Desnica V, Schreiner M, Vladan; Schreiner, Manfred (October 2006). "A LabVIEW-controlled portable x-ray fluorescence spectrometer for the analysis of art objects". X-Ray Spectrometry. 35 (5): 280â€“286. doi:10.1002/xrs.906. Archived from the original on 2010-08-18.
Keleshis C, Ionita C, Rudin S, C.; Ionita, C.; Rudin, S. (June 2006). "Labview [sic] graphical user interface for micro angio-fluoroscopic high resolution detector". Medical Physics. 33 (6): 2007. doi:10.1118/1.2240285.CS1 maint: multiple names: authors list (link)
Fedak W., Bord D., Smith C., Gawrych D., Lindeman K., W.; Bord, D.; Smith, C.; Gawrych, D.; Lindeman, K. (May 2003). "Automation of the Franck-Hertz experiment and the Tel-X-Ometer x-ray machine using LABVIEW". American Journal of Physics. AAPT. 71 (5): 501â€“506. doi:10.1119/1.1527949.CS1 maint: multiple names: authors list (link)


=== Articles on education uses ===
Belletti A., Borromei R., Ingletto G., A.; Borromei, R.; Ingletto, G. (September 2006). "Teaching physical chemistry experiments with a computer simulation by LabVIEW". Journal of Chemical Education. ACS. 83 (9): 1353â€“1355. doi:10.1021/ed083p1353.CS1 maint: multiple names: authors list (link)
Moriarty P.J., Gallagher B.L., Mellor C.J., Baines R.R., P. J.; Gallagher, B. L.; Mellor, C. J.; Baines, R. R. (October 2003). "Graphical computing in the undergraduate laboratory: Teaching and interfacing with LabVIEW". American Journal of Physics. AAPT. 71 (10): 1062â€“1074. doi:10.1119/1.1582189.CS1 maint: multiple names: authors list (link)
Lauterburg, Urs (June 2001). "LabVIEW in Physics Education" (PDF). A white paper about using LabVIEW in physics demonstration and laboratory experiments and simulations.
Drew SM, Steven M. (December 1996). "Integration of National Instruments' LabVIEW software into the chemistry curriculum". Journal of Chemical Education. ACS. 73 (12): 1107â€“1111. doi:10.1021/ed073p1107.
Muyskens MA, Glass SV, Wietsma TW, Gray TM, Mark A.; Glass, Samuel V.; Wietsma, Thomas W.; Gray, Terry M. (December 1996). "Data acquisition in the chemistry laboratory using LabVIEW software". Journal of Chemical Education. ACS. 73 (12): 1112â€“1114. doi:10.1021/ed073p1112.CS1 maint: multiple names: authors list (link)
Ogren PJ, Jones TP, Paul J.; Jones, Thomas P. (December 1996). "Laboratory interfacing using the LabVIEW software package". Journal of Chemical Education. ACS. 73 (12): 1115â€“1116. doi:10.1021/ed073p1115.
Trevelyan, J.P. (June 2004). "10 Years Experience with Remote Laboratories" (PDF). International Conference on Engineering Education Research. ACS.


== External links ==
Official website, National Instruments