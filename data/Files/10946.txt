Title: Q (number format)
Aspects: {'Q value'}

Q is a fixed point number format where the number of fractional bits (and optionally the number of integer bits) is specified. For example, a Q15 number has 15 fractional bits; a Q1.14 number has 1 integer bit and 14 fractional bits. Q format is often used in hardware that does not have a floating-point unit and in applications that require constant resolution.


== Characteristics ==
Q format numbers are notionally fixed point numbers, that is, they are stored and operated upon as regular binary signed integers, thus allowing standard integer hardware/ALU to perform rational number calculations. The number of integer bits, fractional bits and the underlying word size are to be chosen by the programmer on an application-specific basis –  the programmer's choices of the foregoing will depend on the range and resolution needed for the numbers.
Some DSP architectures offer native support for common formats, such as Q1.15.  In this case, the processor can support arithmetic in one step, offering saturation (for addition and subtraction) and renormalization (for multiplication) in a single instruction.  Most standard CPUs do not.  If the architecture does not directly support the particular fixed point format chosen, the programmer will need to handle saturation and renormalization explicitly with bounds checking and bit shifting.
There are two conflicting notations for fixed point.  Both notations are written as Qm.n, where:

Q designates that the number is in the Q format notation –  the Texas Instruments representation for signed fixed-point numbers (the "Q" being reminiscent of the standard symbol for the set of rational numbers).
m. (optional, assumed to be zero or one) is the number of bits set aside to designate the two's complement integer portion of the number, exclusive or inclusive of the sign bit (therefore if m is not specified it is taken as zero or one).
n is the number of bits used to designate the fractional portion of the number, i.e. the number of bits to the right of the binary point. (If n = 0, the Q numbers are integers –  the degenerate case).One convention includes the sign bit in the value of m, and the other convention does not. The choice of convention can be determined by summing m+n. If the value is equal to the register size, then the sign bit is included in the value of m. If it is one less than the register size, the sign bit is not included in the value of m.
In addition, the letter U can be prefixed to the Q to indicate an unsigned value, such as UQ1.15, indicating values from 0.0 to +1.999969482421875 (that is, 
  
    
      
        1
        +
        
          
            
              
                2
                
                  15
                
              
              −
              1
            
            
              2
              
                15
              
            
          
        
      
    
    {\displaystyle 1+{\frac {2^{15}-1}{2^{15}}}}
  ).
Signed Q values are stored in two's complement format, just like signed integer values on most processors.  In two's complement, the sign bit is extended to the register size.
For a given Qm.n format, using an m+n bit signed integer container with n fractional bits:

its range is 
  
    
      
        [
        −
        (
        
          2
          
            m
            −
            1
          
        
        )
        ,
        
          2
          
            m
            −
            1
          
        
        −
        
          2
          
            −
            n
          
        
        ]
      
    
    {\displaystyle [-(2^{m-1}),2^{m-1}-2^{-n}]}
  
its resolution is 
  
    
      
        
          2
          
            −
            n
          
        
      
    
    {\displaystyle 2^{-n}}
  For a given UQm.n format, using an m+n bit unsigned integer container with n fractional bits:

its range is 
  
    
      
        [
        0
        ,
        
          2
          
            m
          
        
        −
        
          2
          
            −
            n
          
        
        ]
      
    
    {\displaystyle [0,2^{m}-2^{-n}]}
  
its resolution is 
  
    
      
        
          2
          
            −
            n
          
        
      
    
    {\displaystyle 2^{-n}}
  For example, a Q15.1 format number:

requires 15+1 = 16 bits
its range is [-214, 214 - 2−1] = [-16384.0, +16383.5] = [0x8000,  0x8001 … 0xFFFF, 0x0000, 0x0001 … 0x7FFE, 0x7FFF]
its resolution is 2−1 = 0.5Unlike floating point numbers, the resolution of Q numbers will remain constant over the entire range.


== Conversion ==


=== Float to Q ===
To convert a number from floating point to Qm.n format:

Multiply the floating point number by 2n
Round to the nearest integer


=== Q to float ===
To convert a number from Qm.n format to floating point:

Convert the number to floating point as if it were an integer, in other words remove the binary point
Multiply by 2−n


== Math operations ==
Q numbers are a ratio of two integers: the numerator is kept in storage, the denominator is equal to 2n.
Consider the following example:

The Q8 denominator equals 28 = 256
1.5 equals 384/256
384 is stored, 256 is inferred because it is a Q8 number.If the Q number's base is to be maintained (n remains constant) the Q number math operations must keep the denominator constant. The following formulas show math operations on the general Q numbers 
  
    
      
        
          N
          
            1
          
        
      
    
    {\displaystyle N_{1}}
   and 
  
    
      
        
          N
          
            2
          
        
      
    
    {\displaystyle N_{2}}
  .

  
    
      
        
          
            
              
                
                  
                    
                      N
                      
                        1
                      
                    
                    d
                  
                
                +
                
                  
                    
                      N
                      
                        2
                      
                    
                    d
                  
                
              
              
                
                =
                
                  
                    
                      
                        N
                        
                          1
                        
                      
                      +
                      
                        N
                        
                          2
                        
                      
                    
                    d
                  
                
              
            
            
              
                
                  
                    
                      N
                      
                        1
                      
                    
                    d
                  
                
                −
                
                  
                    
                      N
                      
                        2
                      
                    
                    d
                  
                
              
              
                
                =
                
                  
                    
                      
                        N
                        
                          1
                        
                      
                      −
                      
                        N
                        
                          2
                        
                      
                    
                    d
                  
                
              
            
            
              
                
                  (
                  
                    
                      
                        
                          N
                          
                            1
                          
                        
                        d
                      
                    
                    ×
                    
                      
                        
                          N
                          
                            2
                          
                        
                        d
                      
                    
                  
                  )
                
                ×
                d
              
              
                
                =
                
                  
                    
                      
                        N
                        
                          1
                        
                      
                      ×
                      
                        N
                        
                          2
                        
                      
                    
                    d
                  
                
              
            
            
              
                
                  (
                  
                    
                      
                        
                          N
                          
                            1
                          
                        
                        d
                      
                    
                    
                      /
                    
                    
                      
                        
                          N
                          
                            2
                          
                        
                        d
                      
                    
                  
                  )
                
                
                  /
                
                d
              
              
                
                =
                
                  
                    
                      
                        N
                        
                          1
                        
                      
                      
                        /
                      
                      
                        N
                        
                          2
                        
                      
                    
                    d
                  
                
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}{\frac {N_{1}}{d}}+{\frac {N_{2}}{d}}&={\frac {N_{1}+N_{2}}{d}}\\{\frac {N_{1}}{d}}-{\frac {N_{2}}{d}}&={\frac {N_{1}-N_{2}}{d}}\\\left({\frac {N_{1}}{d}}\times {\frac {N_{2}}{d}}\right)\times d&={\frac {N_{1}\times N_{2}}{d}}\\\left({\frac {N_{1}}{d}}/{\frac {N_{2}}{d}}\right)/d&={\frac {N_{1}/N_{2}}{d}}\end{aligned}}}
  
Because the denominator is a power of two the multiplication can be implemented as an arithmetic shift to the left and the division as an arithmetic shift to the right; on many processors shifts are faster than multiplication and division.
To maintain accuracy the intermediate multiplication and division results must be double precision and care must be taken in rounding the intermediate result before converting back to the desired Q number.
Using C the operations are (note that here, Q refers to the fractional part's number of bits) :


=== Addition ===

With saturation

Unlike floating point ±Inf, saturated results are not sticky and will unsaturate on adding a negative value to a positive saturated value (0x7FFF) and vice versa in that implementation shown. In assembly language, the Signed Overflow flag can be used to avoid the typecasts needed for that C implementation.


=== Subtraction ===


=== Multiplication ===


=== Division ===


== See also ==
Binary scaling
Fixed-point arithmetic
Floating-point arithmetic


== References ==


== Further reading ==
Oberstar, Erick L. (2007-08-30) [2004]. "Fixed Point Representation & Fractional Math" (PDF). 1.2. Oberstar Consulting. Archived (PDF) from the original on 2017-11-04. Retrieved 2017-11-04. (Note: the accuracy of the article is in dispute; see discussion.)


== External links ==
"Q-Number-Format Java Implementation". Archived from the original on 2017-11-04. Retrieved 2017-11-04.