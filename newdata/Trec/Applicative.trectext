<DOC>
<DOCNO>14f03ecc-9392-4950-a542-c34827139f2e</DOCNO>
<TITLE>Applicative functor</TITLE>
<TEXT>
In functional programming, an applicative functor is a structure intermediate between functors and monads, in that they allow sequencing of functorial computations (unlike plain functors) but without deciding on which computation to perform on the basis of the result of a previous computation (unlike monads). Applicative functors are the programming equivalent of lax monoidal functors with tensorial strength in category theory.
Applicative functors were introduced in 2007 by Conor McBride and Ross Paterson in their paper Functional Pearl: applicative programming with effects.Applicative functors first appeared as a library feature in Haskell, but have since spread to other languages as well, including  Idris, Agda, OCaml, and Scala. Both Glasgow Haskell and Idris now offer language features designed to ease programming with applicative functors.
In Haskell, applicative functors are implemented in the Applicative type class.


== See also ==
Current definition of the Applicative class in Haskell


== References ==
</TEXT>
</DOC>

<DOC>
<DOCNO>4460a56f-1996-4057-ab5e-dd3dfd7fcdf7</DOCNO>
<TITLE>Applicative programming language</TITLE>
<TEXT>
In the classification of programming languages, an applicative programming language is designed to support the development of programs as giving the result of a function of the combined variables. Successive functional transformations are applied to data to arrive at the result.  Such a language, with program control and total state kept in the background, may also be known as a functional language, in a rather loose sense of the term.
Lisp and ML are application programming languages. In Haskell, this programming paradigm is developed into the applicative functor, which extends the higher-order functional abstraction beyond monad.


== See also ==
Applicative universal grammar
Function-level programming


== External links ==
Applicative Programming with Effects (in Haskell, 2008) by Conor McBride and Ross Paterson
</TEXT>
</DOC>

<DOC>
<DOCNO>87c2482c-5bcf-4ebf-9859-151f3857f20f</DOCNO>
<TITLE>Applicative voice</TITLE>
<TEXT>
The applicative voice (abbreviated APL or APPL) is a grammatical voice that promotes an oblique argument of a verb to the core object argument. It is generally considered a valency-increasing morpheme. Applicative is often found in agglutinative languages, such as the Bantu languages and Austronesian languages. Other examples include Nuxalk, Ubykh, and Ainu.


== Behavior ==
Prototypically, applicatives apply to intransitive verbs. They can also be called "advancements" or "object promotion" because they bring a peripheral object to the centre as a direct object. This object is sometimes called the applied object. For transitive verbs, the resulting verb can be ditransitive, or the original object is no longer expressed. If the original object is no longer expressed, it is not a valency-increasing operation


== Multiple applicatives ==
A language may have multiple applicatives, each corresponding to such different roles as comitative, locative, instrumental, and benefactive. Sometimes various applicatives will be expressed by the same morphological exponence, such as in the Bantu language Chewa, where the suffix -ir- forms both instrumental and locative applicatives. Some languages, such as Luganda, permit a 'second applicative' (known in Luganda as the "augmentative applied"), formed by a double application of the suffix. In this case, the second applicative is used to give an alternative meaning.
Applicatives may also be the only way of expressing such roles, as in the Bantu Chaga languages, where instrumental, benefactive, malefactive, and locative are formed solely by applicatives. In other languages, applicatives coexist with other methods of expressing said roles. They are often used to bring a normally oblique argument into special focus, or as in Nez Percé, to keep humans as core arguments.


== Similar processes ==
Applicatives have a degree of overlap with causatives, and in some languages, the two are realized identically. A similar construction known as dative shift, though different from true applicatives, occurs in other languages. Also, the benefactive case is commonly expressed by means of an applicative.


== Examples ==


=== English ===
English does not have a dedicated applicative prefix or suffix. However, prepositions can be compounded with verbs for an applicative effect. For example, from 

Jack ran faster than the giant,the intransitive verb ran can be made transitive, and the oblique noun giant the object:

Jack outran the giant.The applicative verb can be made passive, something which is not possible with ran:

The giant was outrun by Jack.


=== German ===
The German prefix be- is considered an applicative by some, but other analyses reject this view.


=== Swahili ===
Swahili has an applicative suffix -i or -e which appears before the last vowel of the verb. From andika 'to write', we get transitive

Aliandika barua 'he wrote a letter' (a-li-andik-a he-PST-write-IND)and ditransitive

Aliniandikia barua 'he wrote me a letter', or 'he wrote a letter for me' (a-li-ni-andik-i-a he-PST-me-write-APL-IND).Similarly, from soma 'to read', 

Alinisomea barua 'he read me a letter', 'he read a letter to me'.These are sometimes called 'prepositional' forms of the verb because they are translated into English using prepositions: cry for, pray for, eat with, enjoy (be happy about), arrive at, sing to, sell to, send to, open (the door) for, reckon with, see for (himself), die at. However, this name is inaccurate for Swahili, which doesn't use prepositions for such purposes.


=== Yagua ===
Yagua is one language that has dedicated morphology for applicative uses. Here, the applicative suffix -ta shows that the locative or instrumental oblique is now a direct object:
This same -ta suffix can be used with transitive verbs to create ditransitives:

These behave identically as other lexical ditransitives, such as give and send in this language.


== Notes ==


== References ==
Aronoff, Mark; Kirsten Fudeman (2005). What is Morphology?. Blackwell Publishing Ltd. ISBN 0-631-20319-2.
Campbell, Lyle & Verónica Grondona (Eds.). (2012). The Indigenous Languages of South America: A Comprehensive Guide. Berlin, Germany: Walter de Gruyter.
Jacques, Guillaume (2013). Applicative and Tropative Derivations in Japhug Rgyalrong. Linguistics of the Tibeto-Burman Area, 36(2).
Mchombo, Sam (1998). "25: Chichewa".  In Andrew Spencer and Arnold M. Zwicky (ed.). The Handbook of Morphology. Blackwell Publishers Ltd. ISBN 0-631-22694-X.
Michaelis, Laura A.; Josef  Ruppenhofer. (2000). Valence creation and the German applicative: The inherent semantics of linking patterns. Journal of Semantics, 17(4), 335-395.
Mithun, Marianne (2001). The Languages of Native North America. Cambridge University Press. ISBN 0-521-23228-7.
Pacchiarotti, Sara. (2017). Bantu Applicative Construction Types involving *-id: Form, Functions and Diachrony (Doctoral dissertation). University of Oregon.Peterson, David A. (2007). Applicative constructions. Oxford University Press.Polinsky, Maria. 2005. Applicative constructions. In Martin Haspelmath, Matthew S Dryer, David Gil & Bernard Comrie (eds.), The world atlas of language structures, 442–445. Oxford University Press. (http://wals.info/chapter/109).Valenzuela, Pilar M. (2010). Applicative constructions in Shipibo-Konibo (Panoan). International Journal of American Linguistics, 76(1), 101-144.
</TEXT>
</DOC>

