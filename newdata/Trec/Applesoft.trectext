<DOC>
<DOCNO>53e58816-1484-4a89-a3e8-c2f97b81ffb6</DOCNO>
<TITLE>Classic Mac OS</TITLE>
<TEXT>
Classic Mac OS (System Software) refers to the series of operating systems developed for the Macintosh family of personal computers by Apple Inc. from 1984 to 2001, starting with System 1 and ending with Mac OS 9. The Macintosh operating system is credited with having popularized the graphical user interface concept. It was included with every Macintosh that was sold during the era in which it was developed, and many updates to the system software were done in conjunction with the introduction of new Macintosh systems.
Apple released the original Macintosh on January 24, 1984. The first version of the system software, which had no official name, was partially based on the Lisa OS, which Apple previously released for the Lisa computer in 1983. As part of an agreement allowing Xerox to buy shares in Apple at a favorable price, it also used concepts from the Xerox PARC Alto computer, which former Apple CEO Steve Jobs and other Lisa team members had previewed. This operating system consisted of the Macintosh Toolbox ROM and the "System Folder", a set of files that were loaded from disk. The name Macintosh System Software came into use in 1987 with System 5. Apple rebranded the system as Mac OS in 1996, starting officially with version 7.6, due in part to its Macintosh clone program. That program ended after the release of Mac OS 8 in 1997. The last major release of the system was Mac OS 9 in 1999.Initial versions of the System Software run one application at a time. With the introduction of System 5, a cooperative multitasking extension called MultiFinder was added, which was later integrated into System 7 as part of the operating system along with support for virtual memory. By the mid-1990s, however, contemporary operating systems such as Windows NT, OS/2, and NeXTSTEP had all brought pre-emptive multitasking, protected memory, access controls, and multi-user capabilities to desktop computers, The Macintosh's limited memory management and susceptibility to conflicts among extensions that provide additional functionality, such as networking or support for a particular device, led to significant criticism of the operating system, and was a factor in Apple's declining market share at the time.
After two aborted attempts at creating a successor to the Macintosh System Software called Taligent and Copland, and a four-year development effort spearheaded by Steve Jobs' return to Apple in 1997, Apple replaced Mac OS with a new operating system in 2001 named Mac OS X. It retained most of the user interface design elements of the classic Mac OS, and there was some overlap of application frameworks for compatibility, but the two operating systems otherwise have completely different origins and architectures.
The final updates to Mac OS 9 released in 2001 provided interoperability with Mac OS X. The name "Classic" that now signifies the historical Mac OS as a whole is a reference to the Classic Environment, a compatibility layer that helped ease the transition to Mac OS X (now macOS).


== Initial concept ==

The Macintosh project started in late 1978 with Jef Raskin, who envisioned an easy-to-use, low-cost computer for the average consumer. In September 1979, Raskin began looking for an engineer who could put together a prototype. Bill Atkinson, a member of the Apple Lisa team, introduced Raskin to Burrell Smith, a service technician who had been hired earlier that year.
Apple's concept for the Macintosh deliberately sought to minimize the user's awareness of the operating system. Many basic tasks that required more operating system knowledge on other systems could be accomplished by mouse gestures and graphic controls on a Macintosh. This would differentiate it from its contemporaries such as MS-DOS, which use a command-line interface consisting of terse, abbreviated textual commands.
In January 1981, Steve Jobs completely took over the Macintosh project. Jobs and a number of Apple engineers visited Xerox PARC in December 1979, three months after the Lisa and Macintosh projects had begun. After hearing about the pioneering GUI technology being developed at Xerox PARC from former Xerox employees like Raskin, Jobs negotiated a visit to see the Xerox Alto computer and Smalltalk development tools in exchange for Apple stock options. The final Lisa and Macintosh operating systems use concepts from the Xerox Alto, but many elements of the graphical user interface were created by Apple including the menu bar, pull-down menus, and the concepts of drag and drop and direct manipulation.Unlike the IBM PC, which uses 8 kB of system ROM for power-on self-test (POST) and basic input/output system (BIOS), the Mac ROM is significantly larger (64 kB) and holds key OS code. Much of the original Mac ROM was coded by Andy Hertzfeld, a member of the original Macintosh team. He was able to conserve precious ROM space by writing routines in assembly language code optimized with "hacks," or clever programming tricks. In addition to the ROM, he also coded the kernel, the Macintosh Toolbox, and some of the desktop accessories (DAs). The icons of the operating system, which represent folders and application software, were designed by Susan Kare, who later designed the icons for Microsoft Windows 3.0. Bruce Horn and Steve Capps wrote the Macintosh Finder, as well as a number of Macintosh system utilities.
Apple aggressively advertised their new machine. After its release, the company bought all 39 pages of advertisement space in the 1984 November/December edition of Newsweek magazine.  The Macintosh quickly outsold its more sophisticated but much more expensive predecessor, the Lisa. Apple quickly developed a product named MacWorks, which allowed the Lisa to emulate Macintosh system software through System 3, by which time it had been discontinued as the rebranded Macintosh XL. Many of Lisa's operating system advances would not appear in the Macintosh operating system until System 7 or later.


== Architecture ==


=== Compatibility ===
Early versions of Mac OS are compatible only with Motorola 68000-family Macintoshes. As Apple introduced computers with PowerPC hardware, the OS was ported to support this architecture. Mac OS 8.1 is the last version that could run on a 68k processor (the 68040).
In systems prior to PowerPC G3-based systems, significant parts of the system are stored in physical ROM on the motherboard. The initial purpose of this is to avoid using up the limited storage of floppy disks on system support, given that the early Macs have no hard disk (only one model of Mac was ever actually bootable using the ROM alone, the 1991 Mac Classic model). This architecture also allows for a completely graphical OS interface at the lowest level without the need for a text-only console or command-line mode: boot time errors, such as finding no functioning disk drives, are communicated to the user graphically, usually with an icon or the distinctive Chicago bitmap font and a Chime of Death or a series of beeps. This is in contrast to MS-DOS and CP/M computers of the time, which display such messages in a mono-spaced font on a black background, and require the use of the keyboard rather than a mouse, for input. To provide such niceties at a low level, early Mac OS depends on core system software in ROM on the motherboard, which also ensure that only Apple computers or licensed clones (with the copyright-protected ROMs from Apple) can run Mac OS.


==== Mac clones ====

Several computer manufacturers over the years made Macintosh clones that were capable of running Mac OS. From 1995 to 1997, Apple licensed Macintosh ROMs to several companies, notably Power Computing, UMAX and Motorola. These machines normally ran various versions of classic Mac OS. Steve Jobs ended the clone-licensing program after returning to Apple in 1997.
Support for Macintosh clones was first exhibited in System 7.5.1, which was the first version to include the "Mac OS" logo (a variation on the original Happy Mac startup icon), and Mac OS 7.6 was the first to be named "Mac OS" instead of "System". These changes were made to disassociate the operating system from Apple's own Macintosh models.


=== File systems ===
The Macintosh originally used the Macintosh File System (MFS), a flat file system with only one level of folders. This was quickly replaced in 1985 by the Hierarchical File System (HFS), which had a true directory tree. Both file systems are otherwise compatible. An improved file system named HFS Plus ("HFS+" or "Mac OS Extended") was announced in 1997 and implemented in 1998.Files in most file systems used with DOS, Windows, Unix, or other operating systems have only one "fork". By contrast, MFS and HFS give files two different "forks". The data fork contains the same sort of information as a file in other file systems, such as the text of a document or the bitmaps of an image file. The resource fork contains other structured data such as menu definitions, graphics, sounds, or code segments that would be incorporated into a program's file format on other systems. An executable file might consist only of resources (including code segments) with an empty data fork, while a data file might have only a data fork with no resource fork. A word processor file could contain its text in the data fork and styling information in the resource fork, so that an application which doesn't recognize the styling information can still read the raw text.
On the other hand, these forks would provide a challenge to interoperability with other operating systems. In copying or transferring a Mac OS file to a non-Mac system, the default implementations would simply strip the file of its resource fork. Most data files contained only nonessential information in their resource fork, such as window size and location, but program files would be inoperative without their resources. This necessitated such encoding schemes as BinHex and MacBinary, which allowed a user to encode a dual-forked file into a single stream, or inversely take a single stream so-encoded and reconstitute it into a dual-forked file usable by Mac OS.


== Release history ==


=== System 1, 2, 3, and 4 ===

As part of Apple's goal of creating a computer with appliance-like simplicity, there is no explicit distinction made between the operating system software and the hardware it runs on. Because of this, early versions of the operating system do not have a distinct name. The software consists of two user-visible files: the System file, and the Finder, an application used for file management that also displays the Desktop. The two files are contained in a folder directory labeled "System Folder", which contains other resource files, like a printer driver, needed to interact with the System. Version numbers of the operating system are based on the version numbers of these two files.

System 1.0, 1.1, and 2.0 use a flat file system named Macintosh File System (MFS). The Finder provides virtual folders that could be used to organize files, but these folders are not visible from any other application and do not actually exist on the disk.
System 2.0 added support for AppleTalk and the newly introduced LaserWriter to use it.
System 2.1 (Finder 5.0) introduced the Hierarchical File System (HFS) which has real directories. This version was specifically to support the Hard Disk 20 and only implements HFS in RAM; startup and most floppy disks remain MFS 400 K volumes.
System 3.0 (Finder 5.1) was introduced with the Macintosh Plus, officially implementing HFS, 800K startup drives, support for several new technologies including SCSI and AppleShare, and Trash "bulging" (i.e., when the Trash contains files, it gains a bulged appearance).
System 4.0 was released with the Macintosh SE and System 4.1 first shipped with the Macintosh II—these new machines required additional support for the first expansion slots, the Apple Desktop Bus (ADB), internal hard drives and, on the Macintosh II, external color displays and the first Motorola 68020 processor.These releases can only run one application at a time, except for desk accessories, though special application shells such as Multi-Mac or Switcher (discussed under MultiFinder) could work around this. Visible changes are best reflected in the version number of the Finder, where major leaps are found between 1.x, 4.x, 5.x, and 6.x.
In the late 1990s, Apple retroactively gave these older releases a single name.


=== System Software 5 ===
Towards the end of 1987, Apple introduced a package titled "Apple Macintosh System Software Update 5.0". For the first time, the Macintosh operating system was offered as a distinct retail product that included four 800K disks and three manuals, at a cost of $49 USD. The software itself was still freely available through user groups and bulletin board services. While the product box presented this update to the operating system as "version 5.0", this number does not appear in the software itself. Three of the four disks (System Tools 1, System Tools 2 and Utilities 1) are all bootable, and the user can boot off of whichever floppy contain the tools the user needs. For instance, System Tools 2 is the only disk with printer drivers, and Utilities 1 is the only disk with Disk First Aid and Apple HD SC Setup. Because the disks are named System Tools, users and the press commonly referred to this version as "System Tools 5.0".
The primary new feature of System 5 is MultiFinder, an extension which lets the system run several programs at once. The system uses a cooperative multitasking model, meaning that time is given to the background applications only when the foreground application yields control. A change in system functions that applications were already calling to handle events make many existing applications share time automatically, as well as being allowed to perform tasks in the background. Users can also choose not to use MultiFinder, thereby using a single application at a time. In 1990 InfoWorld tested four multitasking options for PC and Mac, viewing MultiFinder positively overall, but noting that its presence halved the speed of file transfer and printing compared to the single-tasking System 6 without MultiFinder.


=== System Software 6 ===

System Software 6 (also referred to as "System 6") is a consolidation release of the Macintosh system software, producing a complete, stable, and long-lasting operating system. Two major hardware introductions requiring additional support under System 6 are the 68030 processor and 1.44 MB SuperDrive debuting with the Macintosh IIx and Macintosh SE/30. Later updates include support for the first specialized laptop features with the introduction of the Macintosh Portable. From System 6 forward, the Finder has a unified version number closely matching that of the System, alleviating much of the confusion caused by the often considerable differences between earlier Systems.


=== System 7/Mac OS 7 ===

On May 13, 1991, System 7 was released. It is a major upgrade over System 6, adding a significant user interface overhaul, new applications, stability improvements and many new features. Its introduction coincides with the release of and provided support for the 68040 Macintosh line. The System 7 era saw numerous changes in the Macintosh platform including a proliferation of Macintosh models, the 68k to Power Macintosh transition as well as the rise of Microsoft Windows, increasing use of computer networking and the explosion in popularity of the Internet.
One of the most significant features of System 7 is virtual memory support, an essential subsystem anticipated for years, which only exists for previous Systems in a third party extension named Virtual from Connectix. Accompanying this was a move to 32-bit memory addressing, necessary for the ever-increasing amounts of RAM available to the Motorola 68030 CPU, and 68020 CPUs with a 68551 PMMU. This process involves making all of the routines in OS code use the full 32-bits of a pointer as an address—prior systems used the upper 8 bits as flags. This change is known as being "32-bit clean". While System 7 itself is 32-bit clean, many existing machines and thousands of applications were not, so it was some time before the process was completed. To ease the transition, the "Memory" control panel contains a switch to disable this feature, allowing for compatibility with older applications.
Another notable System 7 feature is built-in cooperative multitasking. In System Software 6, this function was optional through the MultiFinder. System 7 also introduced aliases, similar to symbolic links on Unix, shortcuts that were introduced in later versions of Microsoft Windows, and shadows in IBM OS/2. System extensions were enhanced by being moved to their own subfolder; a subfolder in the System Folder was also created for the control panels. In System 7.5, Apple includes the Extensions Manager, a previously third-party program which simplified the process of enabling and disabling extensions.
The Apple menu, home only to desk accessories in System 6, was made more general-purpose: the user could now make often-used folders and applications—or anything else they desired—appear in the menu by placing aliases to them in an "Apple Menu Items" subfolder of the System Folder. System 7 also introduced the following: AppleScript, a scripting language for automating tasks; 32-bit QuickDraw, supporting so-called "true color" imaging, previously available as a system extension; and TrueType, an outline font standard.
The Trash, under System 6 and earlier, empties itself automatically when shutting down the computer—or, if MultiFinder is not running, when launching an application. System 7 reimplements the Trash as a special hidden folder, allowing files to remain in it across reboots until the user deliberately chose the "Empty Trash" command.


==== System 7.1 ====
System 7.1 is mainly a bugfix release, with a few minor features added. One of the major new features of System 7.1 was moving fonts out of the System file into the Fonts folder in the System Folder. Previously a resource-copying utility such as ResEdit or Font D/A Mover was required for installing fonts. System 7.1 is not only the first Macintosh operating system to cost money (all previous versions were free or sold at the cost of the floppies), but also received a "Pro" sibling (version 7.1.1) with extra features. System 7.1.2 was the first version to support PowerPC-based Macs. System 7.1 also introduces the System Enablers as a method to support new models without updating the actual System file. This leads to extra files inside the system folder (one per new model supported).


==== System 7.5 ====
System 7.5 introduces a large number of new features, many of which are based on shareware applications that Apple bought and included into the new system. On the newer PowerPC machines, System 7.5 may have stability problems partly due to a new memory manager (which can be turned off), and issues with the handling of errors in the PowerPC code (all PowerPC exceptions map to Type 11). These issues do not affect 68k-architecture machines. System 7.5 is contemporary with Apple's failed Copland effort as well as the release of Windows 95, which coincides with Apple's purchase of several shareware system enhancements to include as new system features.


==== Mac OS 7.6 ====
Stability improved in PowerPC-based Macs with Mac OS 7.6, which dropped the "System" moniker as a more trademarkable name was needed in order to license the OS to the growing market of third-party Macintosh clone manufacturers. Mac OS 7.6 required 32-bit-clean ROMs, and so it dropped support for every Mac with a 68000 processor, as well as the Mac II, Mac IIx, Mac IIcx, and Mac SE/30.


=== Mac OS 8 ===

Mac OS 8 was released on July 26, 1997, the same month Steve Jobs became the de facto CEO of Apple. It was mainly released to keep the Mac OS moving forward during a difficult time for Apple. Initially planned as Mac OS 7.7, it was renumbered "8" to exploit a legal loophole and accomplish Jobs's goal of terminating third-party manufacturers' licenses to System 7 and shutting down the Macintosh clone market.Mac OS 8 added a number of features from the abandoned Copland project, while leaving the underlying operating system unchanged. A multi-threaded Finder was included; files could now be copied in the background. The GUI was changed in appearance to a new shaded greyscale look named Platinum, and the ability to change the appearance themes (also known as skins) was added with a new control panel (though Platinum was the only one shipped). This capability was provided by a new "appearance" API layer within the OS, one of the few significant changes.
Apple sold 1.2 million copies of Mac OS 8 in its first two weeks of availability and 3 million within six months. In light of Apple's financial difficulties at the time, there was a large grassroots movement among Mac users to upgrade and "help save Apple". Even some pirate groups refused to redistribute the OS.


==== Mac OS 8.1 ====
Mac OS 8.1 introduced an updated version of the Hierarchical File System named HFS+, which fixed many of the limitations of the earlier system and continued to be used in macOS up until macOS High Sierra, when it was replaced with the Apple File System. There are some other interface changes such as separating network features from printing, and some improvements to application switching. However, in underlying technical respects, Mac OS 8 is not very different from System 7.


==== Mac OS 8.5 ====
Mac OS 8.5 focuses on speed and stability, with most 68k code replaced by modern code native to the PowerPC. It also improved the appearance of the user interface, although the theming feature was cut late in development.


=== Mac OS 9 ===

Mac OS 9, the last major revision of the classic Mac OS, was released on October 23, 1999. It is generally a steady evolution from Mac OS 8. Early development releases of Mac OS 9 were numbered 8.7.
Mac OS 9 added improved support for AirPort wireless networking. It introduced an early implementation of multi-user support. Though not a true multi-user operating system, Mac OS 9 does allow multiple desktop users to have their own data and system settings. An improved Sherlock search engine added several new search plug-ins. Mac OS 9 also provides a much improved memory implementation and management. AppleScript was improved to allow TCP/IP and networking control. Mac OS 9 also makes the first use of the centralized Apple Software Update to find and install OS and hardware updates.
Other new features included its on-the-fly file encryption software with code signing and Keychain technologies, Remote Networking and File Server packages, and much improved list of USB drivers.
Mac OS 9 also added some transitional technologies to help application developers adopt some Mac OS X features before the introduction of the new OS to the public, to help ease the transition. These included new APIs for the file system and the bundling of the Carbon library that apps could link against instead of the traditional API libraries—apps that were adapted to do this could be run natively on Mac OS X as well. Other changes were made beginning with the Mac OS 9.1 update to allow it to be launched in the Classic Environment within Mac OS X.
The final update to the classic Mac OS was version 9.2.2, released on December 5, 2001.


== Transition to Mac OS X ==

macOS (originally named "Mac OS X" until 2012 and then "OS X" until 2016)
is Apple's current Mac operating system that officially succeeded the classic Mac OS in 2001. Although it was originally marketed as simply "version 10" of Mac OS, it has a history that's largely independent of the earlier Mac OS releases.
The macOS architectural legacy is the successor to Mac OS 9 and the classic Mac OS legacy. However, unlike the classic Mac OS, it is a Unix-based operating system built on NeXTSTEP and technology developed at NeXT from the late 1980s until early 1997, when Apple purchased the company, and its CEO Steve Jobs returned to Apple. macOS also makes use of the BSD codebase and the XNU kernel, and its core set of components is based upon Apple's open source Darwin operating system.
An early version of the operating system, Mac OS X Server 1.0, was released in 1999. It retains the "platinum" appearance from the classic Mac OS and even resembles OPENSTEP in places, with the first version to arrive with the new Aqua user interface. The desktop version, Mac OS X 10.0, followed on March 24, 2001, supporting the new Aqua user interface. Since then, several more versions of the operating system have been released. Mac OS X was renamed "OS X" in 2012 and "macOS" in 2016.
Users of the classic Mac OS generally upgraded to Mac OS X, but it was criticized in its early years as more difficult and less user-friendly than the original Mac OS, for the lack of certain features that had not yet been reimplemented in the new OS, for being slower on the same hardware (especially older hardware), and for incompatibilities with the older OS. Because drivers (for printers, scanners, tablets, etc.) written for the older Mac OS were not compatible with Mac OS X, inconsistent program support with the Classic Environment program used to run the older operating system's programs on Mac OS X, and the lack of Mac OS X support for older Apple computers before late 1997; some Macintosh users continued using the older classic Mac OS for a few years after the original release of Mac OS X. Steve Jobs encouraged people to upgrade to Mac OS X by staging a mock funeral for Mac OS 9 at WWDC 2002.


=== Classic ===

PowerPC versions of Mac OS X up to and including Mac OS X 10.4 Tiger include a compatibility layer for running older Mac applications, the Classic Environment. Originally codenamed the "blue box", the environment runs a nearly complete Mac OS 9 operating system, version 9.1 or later, as a Mac OS X application. This allows applications that have not been ported to the Carbon API to run on Mac OS X. This is reasonably seamless, though "classic" applications retain their original Mac OS 9 appearance and do not gain the Mac OS X "Aqua" appearance.
Early New World ROM PowerPC-based Macs shipped with Mac OS 9.2 as well as Mac OS X. Mac OS 9.2 had to be installed by the user—it was not installed by default on hardware revisions released after Mac OS X 10.4. Most well-written "classic" Mac OS applications function properly under this environment, but compatibility is assured only if the software was written to be unaware of the actual hardware and to interact solely with the operating system. The Classic Environment is not available on Intel-based Mac systems due to the incompatibility of Mac OS 9 with the x86 hardware.


== Emulation ==


=== 68k emulators ===

Third-party Macintosh emulators, such as vMac, Basilisk II, and Executor, eventually made it possible to run the classic Mac OS on Intel-based PCs. These emulators were restricted to emulating the 68k series of processors, and as such most couldn't run versions of the Mac OS that succeeded 8.1, which required PowerPC processors. Most also required a Mac ROM image or a hardware interface supporting a real Mac ROM chip; those requiring an image are of dubious legal standing as the ROM image may infringe on Apple's intellectual property.
A notable exception was the Executor commercial software product from Abacus Research & Development, the only product that used 100% reverse-engineered code without the use of Apple technology. It ran extremely quickly but never achieved more than a minor subset of functionality. Few programs were completely compatible and many were extremely crash-prone if they ran at all. Executor filled a niche market for porting 68k Mac applications to x86 platforms; development ceased in 2002 and the source code was released by the author in late 2008. Emulators using Mac ROM images offered near complete Mac OS compatibility, and later versions offered excellent performance as modern x86 processor performance increased exponentially.
Apple included its own Mac 68k emulator that ran seamlessly on all PowerPC-based versions of the classic Mac OS.


=== PowerPC emulators ===
In comparison with 68k-emulator development, PowerPC support was difficult to justify due to the anticipated wide performance overhead of an emulated PowerPC architecture. This would later prove correct with the PearPC project, despite the availability of 7th and 8th generation x86 processors employing similar architecture paradigms present in the PowerPC. Nevertheless, the PearPC emulator is capable of emulating the PowerPC processors required by newer versions of the Mac OS. However, it is no longer maintained, and like many emulators, it tends to run much slower than a native operating system would.Another PowerPC emulator is SheepShaver, which has been around since 1998 for BeOS on the PowerPC platform, but in 2002 was open sourced, and efforts began to port it to other platforms. Originally it was not designed for use on x86 platforms and required an actual PowerPC processor present in the machine it was running on similar to a hypervisor. Although it provides PowerPC processor support, it can run only up to Mac OS 9.0.4 because it does not emulate a memory management unit.
Other examples include ShapeShifter (by the same developer that created SheepShaver), Fusion, and iFusion. The latter ran classic Mac OS with a PowerPC "coprocessor" accelerator card. Using this method has been said to equal or better the speed of a Macintosh with the same processor, especially with respect to the 68k series due to real Macs running in MMU trap mode, hampering performance.Apple's Rosetta was a PowerPC emulator for Intel-based Macs, but it did not support the classic Mac OS.


== Timeline ==


== Notes ==


== See also ==
List of Apple operating systems
Comparison of operating systems
History of the graphical user interface
Inside Macintosh
Apple Computer, Inc. v. Microsoft Corp.
List of old Macintosh software


== References ==


== External links ==
Apple Discussions: Classic Mac OS – Apple's official forum for Classic Mac OS
The Real History of the GUI – A list of links to the history of GUIs
Apple Macintosh before System 7 – A comprehensive guide to Mac OS releases prior to System 7
Folklore.org – A site of anecdotes shared by the creators of the first Macintosh
The Vintage Mac Museum – Information on Macintosh systems from System 1 to System 7
Macintosh System 1 in your browser – A web-based simulator
Macintosh System 7 in your browser – A web-based simulator
BYTE Magazine September 1986 – A feature on Amiga vs. Macintosh
</TEXT>
</DOC>

<DOC>
<DOCNO>dca5d283-3c32-4178-aec3-5f1a240eb31b</DOCNO>
<TITLE>Applesoft BASIC</TITLE>
<TEXT>
Applesoft BASIC is a dialect of Microsoft BASIC, developed by Marc McDonald and Ric Weiland,  supplied with the Apple II series of computers. It supersedes Integer BASIC and is the BASIC in ROM in all Apple II series computers after the original Apple II model. It is also referred to as FP BASIC (from "floating point") because of the Apple DOS command used to invoke it, instead of INT for Integer BASIC.
Applesoft BASIC was supplied by Microsoft and its name is derived from the names of both Apple and Microsoft. Apple employees, including Randy Wigginton, adapted Microsoft's interpreter for the Apple II and added several features. The first version of Applesoft was released in 1977 on cassette tape and lacked proper support for high-resolution graphics. Applesoft II, which was made available on cassette and disk and in the ROM of the Apple II Plus and subsequent models, was released in 1978. It is this latter version, which has some syntax differences and support for the Apple II high-resolution graphics modes, that is usually synonymous with the term "Applesoft."
An Applesoft compiler, TASC (The AppleSoft Compiler), was produced by Microsoft in 1981.


== History ==
When Steve Wozniak wrote Integer BASIC for the Apple II, he did not implement support for floating point math because he was primarily interested in writing games, a task for which integers alone were sufficient. In 1976, Microsoft had developed Microsoft BASIC, a BASIC interpreter for the MOS Technology 6502, but at the time there was no production computer that used it. Upon learning that Apple had a 6502 machine, Microsoft asked if the company were interested in licensing BASIC, but Steve Jobs replied that Apple already had one.
The Apple II was unveiled to the public at the West Coast Computer Faire in April 1977 and became available for sale in June. One of the most common customer complaints about the computer was BASIC's lack of floating-point capability. Integer BASIC is limited to whole numbers between −32768 and 32767 and caused problems for users attempting to write business applications with it. Steve Wozniak had never added floating point capabilities to Integer BASIC as he did not consider them necessary for gaming and educational software, the two primary tasks he envisioned for the Apple II. As Wozniak—the only person who understood Integer BASIC well enough to add floating point features—was busy with the Disk II drive and controller and with Apple DOS, Apple turned to Microsoft. Making things more problematic was that the rival Commodore PET personal computer had a floating point-capable BASIC interpreter from the beginning. The Applesoft license also saved Microsoft from near-bankruptcy when they licensed BASIC to Commodore for the PET in an agreement that proved unexpectedly costly for them.
Apple reportedly obtained an eight-year license for Applesoft BASIC from Microsoft for a flat fee of $31,000, renewing it in 1985 through an arrangement that gave Microsoft the rights and source code for Apple's Macintosh version of BASIC. Applesoft was designed to be backwards-compatible with Integer BASIC and uses the core of Microsoft's 6502 BASIC implementation, which includes using the GET command for detecting key presses and not requiring any spaces on program lines. While Applesoft BASIC is slower than Integer BASIC, it has many features that the older BASIC lacks:

Atomic strings: A string is no longer an array of characters (as in Integer BASIC and C); it is instead a garbage-collected object (as in Scheme and Java). This allows for string arrays; DIM A$(10) resulted in a vector of eleven string variables numbered 0–10.
Multidimensional arrays (numbers or strings)
Single-precision floating point variables with an 8-bit exponent and a 31-bit significand and improved math capabilities, including trigonometry and logarithmic functions
Commands for high-resolution graphics
DATA statements, with READ and RESTORE commands, for representing numerical and string values in quantity
CHR$, STR$, and VAL functions for converting between string and numeric types (both languages did have the ASC function)
User-defined functions: simple one-line functions written in BASIC, with a single parameter
Error-trapping, allowing BASIC programs to handle unexpected errors by means of a subroutine written in BASICConversely, Applesoft lacks the MOD (remainder) operator that had been present in Integer BASIC.
Adapting BASIC for the Apple II was a tedious job as Apple received a source listing for Microsoft 6502 BASIC which proved to be buggy and also required the addition of Integer BASIC commands. Since Apple had no 6502 assembler on hand, the development team was forced to send the source code over the phone lines to Call Computer, an outfit that offered compiler services. This was an extremely tedious, slow process and after Call Computer lost the source code due to an equipment malfunction, one of the programmers, Cliff Huston, used his own IMSAI 8080 computer to cross assemble the BASIC source.


== Features ==
Applesoft is similar to Commodore's BASIC 2.0 aside from features inherited from Integer BASIC. There are a few minor differences such as Applesoft's lack of bitwise operators; otherwise most BASIC programs that do not utilize hardware-dependent features will run on both BASICs.
The PR# statement is used to redirect output to an expansion card, and IN# is used to redirect input from an expansion card. The slot number of the card is specified after the PR# or IN# within the statement. The computer will lock up if there is no card present in the slot and require a reboot. PR#0 will restore output to the 40 column screen and IN#0 to the keyboard.
The PR# statement can be used to redirect output to the printer (e.g. 10 PR#x:PRINT"Hello!") where x is the slot number containing the printer port card. To send a BASIC program listing to the printer, the user would type PR#x:LIST. After outputting to the printer, it is necessary to execute a PR#0 statement to reset output to the screen.
PR#6 will cause Applesoft to boot the disk drives (although the Disk II controller can be in any slot, it is usually in slot 6). PR#3 will switch to 80 column text mode if an 80 column card is present. 80 column cards also add 12 new control codes that can be generated with the CHR$ function. Enhanced Apple IIe and IIc models with the MouseText character set include another two control codes to enable and disable the feature.
As with Commodore BASIC, numeric variables are stored as 40-bit floating point; each variable requires five bytes of memory. The programmer may designate variables as integer by following them with a percent sign, in which case they use two bytes and are limited to a range of -32768 to 32767; however BASIC internally converts them back to floating point, while each percent sign also takes an additional byte of program code, so in practice this feature is only useful for reducing the memory usage of large array variables.
The RND function generates a pseudorandom fractional number between 0 and 1. RND(0) returns the most recently generated random number. RND with a negative number will jump to a point in the sequence determined by the particular negative number used. RND with any positive value will generate a new random number from the sequence, not dependent on the actual value given. Random numbers are generated via a formula based on the previously generated value, and thus are not truly random. Locations $4E and $4F, which the system cycles the values of continuously while waiting for user keystrokes, can be PEEKed to provide truly random values to use as a seed (when negated) for RND.
Like other implementations of Microsoft BASIC, Applesoft discards spaces (outside of strings and comments) on program lines. LIST adds spaces when displaying code for the sake of readability. Since the LIST code will add a space before AND after every tokenized keyword, it often produces two spaces in a row where one would suffice for readability.
The default prompt for INPUT is a question mark. PRINT does not add a leading space in front of numbers.
Coleco claimed that its Adam home computer's SmartBASIC was source-code compatible with Applesoft. Microsoft licensed a BASIC compatible with Applesoft to VTech for its Laser 128 clone.


=== Limitations ===
Through several early models of the Apple II, Applesoft BASIC did not support the use of lowercase letters in programs, except in strings. PRINT is a valid command but print and Print result in a syntax error.
Applesoft lacks several commands and functions common to most of the non-6502 Microsoft BASIC interpreters, such as:

INSTR (search for a substring in a string)
PRINT USING (format numbers in printed output)
INKEY$ (check for a keypress without stopping the program; although a PEEK to location $C000 achieves this action)
LPRINT (output to a printer instead of the screen)Applesoft does not come with any built-in commands for file or disk handling, other than a way to save programs to, and load programs from, cassette tape. The Apple II disk operating system, known simply as DOS, augments the language to provide such abilities.
Applesoft BASIC variable names are significant only to two letters. They can be made longer, but only the first two letters are used. For instance, "LOW" and "LOSS" are treated as the same variable, and attempting to assign a value to "LOSS" overwrites any value assigned to "LOW". Because the language uses tokenization, a programmer has to avoid consecutive letters that are also Applesoft commands or operations. The name "SCORE" for a variable is interpreted as containing the OR Boolean operator, rendered as SC OR E. "BACKGROUND" contains GR, the command to invoke the low-resolution graphics mode, and results in a syntax error.


=== Sound and graphics ===
The only sound support is the option to PRINT an ASCII bell character to sound the system alert beep, and a PEEK command to click the speaker. The language is not fast enough to produce more than a baritone buzz from repeated clicks. Programs can, however, store a machine-language routine to be called to generate electronic musical tones spanning several octaves.
Applesoft supports the Apple II lores graphics display, where 40 color "blocks" horizontally, and up to 48 blocks vertically, can be displayed in 16 colors, with commands to plot individual blocks and horizontal or vertical lines; as well as the hires mode, where six colors (a fixed subset of the lores palette of 16 colors) can be displayed in a resolution of 280 horizontally by 192 vertically (with some limitations on horizontal placement), with a command to draw points or any diagonal lines onscreen. Beginning with the Apple IIe, a new "double-high resolution" mode, based on a mode introduced on the Apple III computer, became available on machines with 128k of memory. This mode essentially duplicates the resolution of the original hires mode, but including all 16 colors of the lores palette. Applesoft, however, does not provide support for this mode, and must rely on supplemental machine-language routines in order to utilize it. Additional new graphics modes on the Apple IIgs are likewise not supported.
No provision exists for mixing text and graphics, except for the limited "hardware split screen" of the Apple II (four lines of text at the bottom of the screen).
Vector-based shape tables can be used to draw objects in hires graphics, but are slow in comparison to routines that draw bitmaps directly. They also only support the defining of horizontal and vertical lines. Diagonals and curves are not supported, although shapes can be drawn rotated to various angles, so that lines ostensibly defined as horizontal or vertical will appear diagonal. In addition, shapes can be drawn scaled up to larger sizes.


=== Extensions ===
Applesoft BASIC can be extended by two means: the ampersand (&) command and the USR() function. These are two features that call low-level machine-language routines stored in memory, which is useful for routines that need to be fast or require direct access to arbitrary functions or data in memory. The USR() function takes one numerical argument, and can be programmed to derive and return a calculated function value, to be used in a numerical expression. "&" is effectively a shorthand for CALL, with an address that is predefined.


=== Bugs ===
A deficiency in Applesoft's error-trapping with ONERR means that the system stack would not be reset if an error-handling routine did not invoke RESUME, potentially leading to a crash. Error-handling that does not employ RESUME can avoid the problem with a CALL -3288 or (equivalent) 62248 before exiting the routine.


=== Performance ===
Wozniak originally referred to his Integer BASIC as "Game BASIC" (having written it so he could implement a Breakout clone for his new computer). Few action games were written in Applesoft BASIC, in large part because the use of floating-point numbers for all math operations degrades performance.
Applesoft BASIC programs are stored as a linked list of lines; a GOTO or GOSUB takes linear time. Some programs had the subroutines at the top to reduce the time for calling them.
Unlike what Integer BASIC does, Applesoft BASIC does not convert literal numbers in the source code into the internal binary format at the time the source line is entered; rather, the string of digits is stored as entered and the relatively slow conversion happens at runtime whenever the line is executed. Since variable lookup is often faster than this conversion, it is generally faster to store numeric constants that are used inside loops in variables, before the loop is entered.


== Sample code ==

Hello World in Applesoft BASIC can be entered as the following:

Multiple commands can be included on the same line of code if separated by a colon (:). The ? can be used in Applesoft BASIC (and almost all versions of Microsoft BASIC) as a shortcut for "PRINT", though spelling out the word is not only acceptable but canonical—Applesoft converted "?" in entered programs to the same token as "PRINT" (thus no memory is actually saved by using "?"), thus either appears as "PRINT" when a program is listed. The program above appears in a LIST command as:

When Applesoft II BASIC was initially released in mid-1978, it came on cassette tape and could be loaded into memory via the Apple II's machine language monitor. When the enhanced Apple II+ replaced the original II in 1979, Applesoft was now included in ROM and automatically started on power-up if no bootable floppy disk was present. Conversely, Integer BASIC was now removed from ROM and turned into an executable file on the DOS 3.3 disk.


== Early evolution ==
The original Applesoft, stored in RAM as documented in its Reference Manual of November 1977, has smaller interpreter code than the later Applesoft II, occupying 8½ kb of memory, instead of the 10 kb used by the later Applesoft II. Consequently, it lacks a number of command features developed for the later, mainstream version:

All commands supporting Apple's "high resolution" graphics (9 total)
Error-trapping with ONERR...GOTO and RESUME
Machine-routine shorthand call "&"
Screen-clearing HOME (a call to a system ROM routine)
Text-output control NORMAL, INVERSE, FLASH and SPEED=
The print-space function SPC() is listed among reserved words in the manual, but is not otherwise documented (the TAB() print-function is documented)
Cassette tape storage of numerical arrays: STORE and RECALL
Device response: WAITas well as several the later version would have, that had already been present in Apple's Integer BASIC:

Program-line deletion: DEL
Machine-routine access: CALL
Peripheral device access: IN# and PR# (although IN without "#" is listed among reserved words)
Memory range control: HIMEM: and LOMEM:
Execution tracking for debugging: TRACE and NOTRACE
Screen-positioning: HTAB and VTAB
Subroutine aborting POP
Functions PDL() to read the analog controllers, and SCRN() to read the low-resolution graphics screen (both accessing system ROM routines)In addition, its low-resolution graphics commands have different names from their Integer BASIC/Applesoft II counterparts. All command names are of the form PLTx such that GR, COLOR=, PLOT, HLIN and VLIN are called PLTG, PLTC, PLTP, PLTH, and PLTV, respectively. The command for returning to text mode, known as TEXT in other versions, is simply TEX, and carries the proviso that it has to be the last statement in a program line.
Applesoft BASIC 1.x was closer to Microsoft's original 6502 BASIC code than the later Applesoft II; it retained the Memory Size? prompt and displayed a Microsoft copyright notice. To maintain consistency with Integer BASIC, the "Ok" prompt from Microsoft's code was replaced by a ] character. Applesoft 1.x also prompted the user upon loading if he wished to disable the REM statement and the LET keyword in assignment statements in exchange for lores graphics commands.
The USR() function is also defined differently, serving as a stand-in for the absent CALL command. Its argument is not for passing a numerical value to the machine-language routine, but is instead the call-address of the routine itself; there is no "hook" to pre-define the address. All of several examples in the manual use the function only to access "system monitor ROM" routines, or short user-routines to manipulate the ROM routines. No mention is made of any code to calculate the value returned by the function itself; the function is always shown being assigned to "dummy" variables, which, without action to set a value by user-code, just receive a meaningless value handed back to them. Even accessed ROM routines that return values (in examples, those that provide the service of PDL() and SCRN() functions) merely have their values stored, by user-routines, in locations that are separately PEEKed in a subsequent statement.
Unlike in Integer BASIC and Applesoft II, the Boolean operators AND, OR and NOT perform bitwise operations on 16-bit integer values. If they are given values outside that range, an error results.
The terms OUT and PLT (and the aforementioned IN) appear in the list of reserved words, but are not explained anywhere in the manual.


== See also ==
ALF's Formula Transfer Link, speed enhancement for Applesoft BASIC
Chinese BASIC, a Chinese-localized version of Applesoft BASIC
Apple III BASICs from Apple and Microsoft


== References ==


== External links ==
Disassembled ROM
AppleSoft BASIC in JavaScript
</TEXT>
</DOC>

