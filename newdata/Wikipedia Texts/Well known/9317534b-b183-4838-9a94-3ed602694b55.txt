Well-known text representation of geometry

Well-known text (WKT) is a text markup language for representing vector geometry objects on a map. A binary equivalent, known as well-known binary (WKB), is used to transfer and store the same information on databases. The formats were originally defined by the Open Geospatial Consortium (OGC) and described in their Simple Feature Access.  The current standard definition is in the ISO/IEC 13249-3:2016 standard.


== Geometric objects ==
WKT can represent the following distinct geometric objects:

Point, MultiPoint
LineString, MultiLineString
Polygon, MultiPolygon, Triangle
PolyhedralSurface
TIN (Triangulated irregular network)
GeometryCollectionCoordinates for geometries may be 2D (x, y), 3D (x, y, z), 4D (x, y, z, m) with an m value that is part of a linear referencing system or 2D with an m value (x, y, m). Three-dimensional geometries are designated by a "Z" after the geometry type and geometries with a linear referencing system have an "M" after the geometry type.  Empty geometries that contain no coordinates can be specified by using the symbol EMPTY after the type name.
WKT geometries are used throughout OGC specifications and are present in applications that implement these specifications. For example, PostGIS contains functions that can convert geometries to and from a WKT representation, making them human readable.
The OGC standard definition requires a polygon to be topologically closed. It also states that if the exterior linear ring of a polygon is defined in a counterclockwise direction it will be seen from the "top". Any interior linear rings should be defined in opposite fashion compared to the exterior ring, in this case, clockwise.
The following are some other examples of geometric WKT strings: (Note: Each item below is an individual geometry.)


== Well-known binary ==
Well-known binary (WKB) representations are typically shown in hexadecimal strings.
The first byte indicates the byte order for the data:

00 : big endian
01 : little endianThe next 4 bytes are a 32-bit unsigned integer for the geometry type, as described below:

Each data type has a unique data structure, such as the number of points or linear rings, followed by coordinates in 64-bit double numbers.
For example, the geometry POINT(2.0 4.0) is represented as: 000000000140000000000000004010000000000000, where:

1-byte integer 00 or 0: big endian
4-byte integer 00000001 or 1: POINT (2D)
8-byte float 4000000000000000 or 2.0: x-coordinate
8-byte float 4010000000000000 or 4.0: y-coordinate


== Format variations ==
EWKT and EWKB – Extended Well-Known Text/Binary 
A PostGIS-specific format that includes the spatial reference system identifier (SRID) and up to 4 ordinate values (XYZM). For example: SRID=4326;POINT(-44.3 60.1) to locate a longitude/latitude coordinate using the WGS 84 reference coordinate system.
AGF Text – Autodesk Geometry Format 
An extension to OGC's Standard (at the time), to include curved elements; most notably used in MapGuide.


== Software support ==


=== Database engines ===
Apache Drill supports full range of geospatial queries since version 1.12 as well as reading ESRI Shape files (SHP).
Apache Solr enterprise search server since 4.0 through JTS
Elasticsearch distributed, RESTful search and analytics engine since 6.2
PostgreSQL with PostGIS Module 2.0
Kinetica GPU-accelerated geospatial database
Oracle Spatial 9i, 10g, 11g
OmniSci since 4.0
MarkLogic Server since 4.2
MemSQL since 4
MySQL since 4.1
MariaDB, all versions
Neo4j
IBM DB2 LUW 9, 10 with Spatial Extender
IBM DB2 for z/OS 9, 10 with Spatial Support
IBM Netezza with Netezza Spatial
IBM Informix 9,10,11 with Spatial datablade module
Microsoft SQL Server 2008 R2, 2012, 2014, 2016
SpatiaLite
Teradata 6.1, 6.2, 12, 13 (native in 13 through add-in in previous versions)
Ingres GeoSpatial
Altibase 5.x
SQL Anywhere 12
SAP HANA SP07,SP08
H2 since 1.3.173 (2013-07-28)
Vertica since 7.1.0
VoltDB since V6.0


=== APIs ===
Boost C++ libraries (C++): See Geometry io/wkt headers
Esri geometry-api-java
GEOS (C/C++)Shapely (Python): See Shapely Documentation and Shapely in PyPI
GeoPHP (PHP)GDAL (C/C++ with bindings to  Java, Python, and others)
GeoRust: rust-wkt (Rust bindings)
JTS Topology Suite (Java)
Spatial4j (Java)
NetTopologySuite (.NET)
OpenLayers (JavaScript)
OpenScales (ActionScript)
parsewkt (Python) is a peg parser from WKT to python dictionaries
pygeoif (Python) parses wkt with regular expressions
rgeo (Ruby)
sf (R)
Terraformer (JavaScript)
WellKnownLib (C# .Net) Well-Known Text and Binary Parser


=== Protocols ===
GeoSPARQL
SensorThings API


== See also ==
Simple Features
Geography Markup Language
Well-known text representation of coordinate reference systems


== References ==


== External links ==
Simple Feature Access Specification
ISO Spatial standard (there is a charge for this)
BNF Notation of WKT
EBNF Notation of WKT
Online conversion between geometry objects representations