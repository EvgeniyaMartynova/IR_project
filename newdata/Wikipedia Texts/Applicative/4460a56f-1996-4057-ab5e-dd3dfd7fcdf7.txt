Applicative programming language

In the classification of programming languages, an applicative programming language is designed to support the development of programs as giving the result of a function of the combined variables. Successive functional transformations are applied to data to arrive at the result.  Such a language, with program control and total state kept in the background, may also be known as a functional language, in a rather loose sense of the term.
Lisp and ML are application programming languages. In Haskell, this programming paradigm is developed into the applicative functor, which extends the higher-order functional abstraction beyond monad.


== See also ==
Applicative universal grammar
Function-level programming


== External links ==
Applicative Programming with Effects (in Haskell, 2008) by Conor McBride and Ross Paterson